"""FastAPI application for Fast Response Service."""

from fastapi import FastAPI
from app.api.routes import router
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from app.utils.logger.logger_util import get_logger

logger = get_logger()

app = FastAPI(
    title="Fast Response API",
    description="""
    ‚ö° Fast Response Service

    A REST API service that allows any application to send a prompt and input text to get fast responses generated by language models (LLM).

    Use cases:
    - Summarize texts
    - Improve writing
    - Generate automatic replies
    - Rewrite content
    - Any prompt-based task

    üöÄ Key Features

    - üî• Fast, customized responses based on your prompt
    - ü§ñ Integration with LLMs (e.g., AWS Bedrock Claude)
    - üì¶ Simple, flexible API for integration with any app

    üèóÔ∏è Tech Stack

    - FastAPI
    - AWS Bedrock (Claude)
    - Python 3.13
    """,
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
    license_info={
        "name": "MIT License",
        "url": "https://opensource.org/licenses/MIT",
    },
    openapi_tags=[
        {
            "name": "Fast Responses",
            "description": "Operations for generating fast responses from prompts and texts"
        },
        {
            "name": "Health",
            "description": "Service health and status endpoints"
        }
    ]
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.include_router(router)


@app.get(
    "/",
    tags=["Health"],
    summary="API Information",
    description="Get basic information about the Fast Response API service",
    response_description="Metadata and available endpoints"
)
async def root():
    """Root endpoint providing comprehensive API information."""
    return {
        "service": "Fast Response API",
        "version": "1.0.0",
        "description": "REST API for fast response generation using LLMs",
        "documentation": {
            "swagger_ui": "/docs",
            "redoc": "/redoc",
            "openapi_json": "/openapi.json"
        },
        "endpoints": {
            "POST /api/fast-response": "Generate a fast response from a prompt and text",
            "GET /health": "Health check endpoint"
        },
        "technology_stack": ["FastAPI", "AWS Bedrock", "Python 3.13"]
    }


@app.get(
    "/health",
    tags=["Health"],
    summary="Health Check",
    description="Check the health status of the Fast Response API service",
    response_description="Service status and metadata"
)
async def health():
    try:
        return {
            "status": "healthy",
            "service": "Fast Response API",
            "version": "1.0.0"
        }
    except Exception as e:
        logger.error(f"Health check failed: {str(e)}")
        return {
            "status": "unhealthy",
            "service": "Fast Response API",
            "error": str(e)
        }


@app.exception_handler(Exception)
async def global_exception_handler(request, exc):
    logger.error(f"Unhandled exception: {str(exc)}")
    return JSONResponse(
        status_code=500,
        content={
            "error": "Internal server error",
            "status": "error",
            "details": "An unexpected error occurred. Please check the logs or contact support."
        }
    )